name: "Application release pipeline"

on:
  workflow_dispatch:

  # push:
  #   branches: ["main"]

permissions:
  contents: read
  pull-requests: write

jobs:
  build-push-frontend:
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: validator-frontend

        run: |
          docker build -f ./jumia_phone_validator/validator-frontend/Dockerfile -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-push-backend:
    runs-on: ubuntu-latest
    needs: build-push-frontend
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: validator-backend

        run: |
          docker build -f ./jumia_phone_validator/validator-backend/Dockerfile -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  release-backend:
    runs-on: ubuntu-latest
    needs: build-push-backend
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Release validator Backend Image To Cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: validator-backend
          KUBECTL_VERSION: "v1.22.0"
        with:
          args: apply -f ./bonus-point/manifests/backend.yml

  release-frontend:
    runs-on: ubuntu-latest
    needs: build-push-backend
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Release validator Backend Image To Cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: validator-frontend
          KUBECTL_VERSION: "v1.22.0"
        with:
          args: apply -f ./bonus-point/manifests/frontend.yml