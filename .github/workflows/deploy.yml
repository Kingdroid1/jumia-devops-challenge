name: "Infrastructure and application release pipeline"

on:
  # workflow_dispatch:

  push:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-infrastructure:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the code repository
      - name: Checkout
        uses: actions/checkout@v3

      # Install TF CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false

      # Initialize
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: "./infrastructure"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generate an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: "./infrastructure"

      # Apply execution plan
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tf.plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: "./infrastructure"

  build-push-backend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: production

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          docker build ./jumia_phone_validator/validator-backend/Dockerfile -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-push-frontend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: production

  # Use the Bash shell
    defaults:
      run:
        shell: bash

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "jumia-devops"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          docker build ./jumia_phone_validator/validator-frontend/Dockerfile -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
